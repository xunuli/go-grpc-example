// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.1
// source: proto/hello.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// HelloClient is the client API for Hello service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HelloClient interface {
	// 服务端流式
	SayHellostreamServer(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (Hello_SayHellostreamServerClient, error)
	// 客户端流式
	SayHellostreamClient(ctx context.Context, opts ...grpc.CallOption) (Hello_SayHellostreamClientClient, error)
	// 双向端流式
	SayHellostream(ctx context.Context, opts ...grpc.CallOption) (Hello_SayHellostreamClient, error)
}

type helloClient struct {
	cc grpc.ClientConnInterface
}

func NewHelloClient(cc grpc.ClientConnInterface) HelloClient {
	return &helloClient{cc}
}

func (c *helloClient) SayHellostreamServer(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (Hello_SayHellostreamServerClient, error) {
	stream, err := c.cc.NewStream(ctx, &Hello_ServiceDesc.Streams[0], "/proto.Hello/SayHellostream_server", opts...)
	if err != nil {
		return nil, err
	}
	x := &helloSayHellostreamServerClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Hello_SayHellostreamServerClient interface {
	Recv() (*HelloReply, error)
	grpc.ClientStream
}

type helloSayHellostreamServerClient struct {
	grpc.ClientStream
}

func (x *helloSayHellostreamServerClient) Recv() (*HelloReply, error) {
	m := new(HelloReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *helloClient) SayHellostreamClient(ctx context.Context, opts ...grpc.CallOption) (Hello_SayHellostreamClientClient, error) {
	stream, err := c.cc.NewStream(ctx, &Hello_ServiceDesc.Streams[1], "/proto.Hello/SayHellostream_client", opts...)
	if err != nil {
		return nil, err
	}
	x := &helloSayHellostreamClientClient{stream}
	return x, nil
}

type Hello_SayHellostreamClientClient interface {
	Send(*HelloRequest) error
	CloseAndRecv() (*HelloReply, error)
	grpc.ClientStream
}

type helloSayHellostreamClientClient struct {
	grpc.ClientStream
}

func (x *helloSayHellostreamClientClient) Send(m *HelloRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *helloSayHellostreamClientClient) CloseAndRecv() (*HelloReply, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(HelloReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *helloClient) SayHellostream(ctx context.Context, opts ...grpc.CallOption) (Hello_SayHellostreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &Hello_ServiceDesc.Streams[2], "/proto.Hello/SayHellostream", opts...)
	if err != nil {
		return nil, err
	}
	x := &helloSayHellostreamClient{stream}
	return x, nil
}

type Hello_SayHellostreamClient interface {
	Send(*HelloRequest) error
	Recv() (*HelloReply, error)
	grpc.ClientStream
}

type helloSayHellostreamClient struct {
	grpc.ClientStream
}

func (x *helloSayHellostreamClient) Send(m *HelloRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *helloSayHellostreamClient) Recv() (*HelloReply, error) {
	m := new(HelloReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// HelloServer is the server API for Hello service.
// All implementations must embed UnimplementedHelloServer
// for forward compatibility
type HelloServer interface {
	// 服务端流式
	SayHellostreamServer(*HelloRequest, Hello_SayHellostreamServerServer) error
	// 客户端流式
	SayHellostreamClient(Hello_SayHellostreamClientServer) error
	// 双向端流式
	SayHellostream(Hello_SayHellostreamServer) error
	mustEmbedUnimplementedHelloServer()
}

// UnimplementedHelloServer must be embedded to have forward compatible implementations.
type UnimplementedHelloServer struct {
}

func (UnimplementedHelloServer) SayHellostreamServer(*HelloRequest, Hello_SayHellostreamServerServer) error {
	return status.Errorf(codes.Unimplemented, "method SayHellostreamServer not implemented")
}
func (UnimplementedHelloServer) SayHellostreamClient(Hello_SayHellostreamClientServer) error {
	return status.Errorf(codes.Unimplemented, "method SayHellostreamClient not implemented")
}
func (UnimplementedHelloServer) SayHellostream(Hello_SayHellostreamServer) error {
	return status.Errorf(codes.Unimplemented, "method SayHellostream not implemented")
}
func (UnimplementedHelloServer) mustEmbedUnimplementedHelloServer() {}

// UnsafeHelloServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HelloServer will
// result in compilation errors.
type UnsafeHelloServer interface {
	mustEmbedUnimplementedHelloServer()
}

func RegisterHelloServer(s grpc.ServiceRegistrar, srv HelloServer) {
	s.RegisterService(&Hello_ServiceDesc, srv)
}

func _Hello_SayHellostreamServer_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(HelloRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(HelloServer).SayHellostreamServer(m, &helloSayHellostreamServerServer{stream})
}

type Hello_SayHellostreamServerServer interface {
	Send(*HelloReply) error
	grpc.ServerStream
}

type helloSayHellostreamServerServer struct {
	grpc.ServerStream
}

func (x *helloSayHellostreamServerServer) Send(m *HelloReply) error {
	return x.ServerStream.SendMsg(m)
}

func _Hello_SayHellostreamClient_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(HelloServer).SayHellostreamClient(&helloSayHellostreamClientServer{stream})
}

type Hello_SayHellostreamClientServer interface {
	SendAndClose(*HelloReply) error
	Recv() (*HelloRequest, error)
	grpc.ServerStream
}

type helloSayHellostreamClientServer struct {
	grpc.ServerStream
}

func (x *helloSayHellostreamClientServer) SendAndClose(m *HelloReply) error {
	return x.ServerStream.SendMsg(m)
}

func (x *helloSayHellostreamClientServer) Recv() (*HelloRequest, error) {
	m := new(HelloRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Hello_SayHellostream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(HelloServer).SayHellostream(&helloSayHellostreamServer{stream})
}

type Hello_SayHellostreamServer interface {
	Send(*HelloReply) error
	Recv() (*HelloRequest, error)
	grpc.ServerStream
}

type helloSayHellostreamServer struct {
	grpc.ServerStream
}

func (x *helloSayHellostreamServer) Send(m *HelloReply) error {
	return x.ServerStream.SendMsg(m)
}

func (x *helloSayHellostreamServer) Recv() (*HelloRequest, error) {
	m := new(HelloRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Hello_ServiceDesc is the grpc.ServiceDesc for Hello service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Hello_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Hello",
	HandlerType: (*HelloServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SayHellostream_server",
			Handler:       _Hello_SayHellostreamServer_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SayHellostream_client",
			Handler:       _Hello_SayHellostreamClient_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "SayHellostream",
			Handler:       _Hello_SayHellostream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "proto/hello.proto",
}
